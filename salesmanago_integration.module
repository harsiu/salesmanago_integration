<?php

use GuzzleHttp\Exception\RequestException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
/**
 * Use this function to find the ID of the webform,
 * then call a function as the form is submitted.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function salesmanago_integration_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $query = \Drupal::entityTypeManager()->getStorage('salesmanago')->load($form_id);

  if(!empty($query)) {
    $form['actions']['submit']['#submit'][] = 'salesmanago_integration_webform_submit_handler';
  }
}

/**
 * Function to be called when a webform that exists in salesmanago integration form list is called
 *
 * @param $form
 * @param $form_state
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function salesmanago_integration_webform_submit_handler($form, FormStateInterface $form_state) {
  // endpoint config
  $endpoint = \Drupal::entityTypeManager()->getStorage('endpoint')->load('default');
  // salesmanago config for current form
  $form_fields = \Drupal::entityTypeManager()->getStorage('salesmanago')->load($form['form_id']['#value']);

  /**
   * @param $form_values
   *   Array of key values pairs where:
   *   - key is salesmanago entity key;
   *   - value is value of submitted form field
   */
  $form_values = get_form_values($form_fields, $form_state);

  $client_id = $endpoint->client_id;
  $api_key = substr(md5(rand()), 0, 10); // randomly generated string
  $api_secret = $endpoint->api_secret;
  $sha = sha1($api_key . $client_id . $api_secret);

  /**
   * Accept and Content-Type headers are required according to Salesmanago API
   * @see https://docs.salesmanago.com/#general-information
   *
   * All API calls require these elements to be present:
   * - headers: call headers defined by SALESmanago API docs
   * - clientId: your personal client ID generated by SALESmanago
   *   @see https://salesmanago.pl/settings/integration.htm
   * - apiKey: randomly generated string
   * - requestTime: timestamp of time when a API call was made
   * - sha: result of sha1 hash created from the combination of apiKey, clientId and $api_secret
   *   API secret key can be found in our SALESmanago integration page.
   *
   * Contact insert/update call requires these fields:
   * - contact: array with contact details
   *   - email: contact email
   *   - name: contact full name
   * - owner: the owner of the contact (SALESmanago user account email)
   *
   * All other variables used in the /api/contact/upsert call are optional
   */
  $options = [
    'headers' => [
      'Accept' => 'application/json, application/json',
      'Content-Type' => 'application/json;charset=UTF-8'
    ],
    'clientId' => $client_id,
    'apiKey' => $api_key,
    'requestTime' => '',
    'sha' => $sha,
    'async' => true,
    'contact' => [
      'name' => $form_values['name'],
      'email' => $form_values['email'],
    ],
    'owner' => $endpoint->email,
    'forceOptOut' => true,
    'forceOptIn' => false,
    'forcePhoneOptOut' => true,
    'forcePhoneOptIn' => false,
    'tags' => [
    ],
    'properties' => [
    ],
    'consentDetails' => [
    ]
  ];

  set_optional_values($form_fields, $form_values, $options);

  $url = 'https://' . $endpoint->address . '/api/contact/upsert'; // set full path for specific api request
  send_request($url, $options);
}

/**
 * Get form values from form fields specified in SALESmanago forms settings
 * Loop over SM forms settings and get all configured form field values
 *
 * @param EntityInterface $form_fields SalesManago Form field ids from configuration
 * @param FormStateInterface $form_state
 * @return array
 */
function get_form_values($form_fields, FormStateInterface $form_state) {
  $form_values = [];

  foreach ($form_fields as $sm_field => $webform_field) {
    // ignore these fields because they don't correspond to a form field
    if ($sm_field == 'uuid' or $sm_field == 'id' or $sm_field == 'consentCount') {
      continue;
    }

    // handle consentDetails, it's value is a array of consent name => form field id used to agree to consent
    if ($sm_field == 'consentDetails') {
      for ($index = 0; $index < $form_fields->consentCount; $index++) {
        $form_values[$sm_field][$index] = $form_state->getValue($webform_field[$index]['field']);
      }
      continue;
    }

    // if SM API field is configured
    if (isset($webform_field) and $webform_field != '') {
      $form_values[$sm_field] = $form_state->getValue($webform_field);
    }
  }

  return $form_values;
}

/**
 * Set optional SM form config values to request array if they are configured.
 * If submitted form field value is empty, do not include it in the API request.
 * When SM already has these contact details, then empty submission will overwrite contact info.
 *
 * @param EntityInterface $form_fields SalesManago form configuration
 * @param $form_values array Form values
 * @param $options array Data to send to SM
 */
function set_optional_values($form_fields, $form_values, &$options) {
  if (isset($form_values['forceOptIn']) and $form_values['forceOptIn'] == 1) {
    $options['forceOptOut'] = false;
    $options['forceOptIn'] = true;
  }

  if (isset($form_values['forcePhoneOptIn']) and $form_values['forcePhoneOptIn'] == 1) {
    $options['forcePhoneOptOut'] = false;
    $options['forcePhoneOptIn'] = true;
  }

  if (isset($form_values['phone']) and $form_values['phone'] != '') {
    $options['contact']['phone'] = strip_tags($form_values['phone']);
  }

  if (isset($form_fields->tags) and $form_fields->tags != '') {
    $options['tags'][] = $form_fields->tags;
  }

  if (isset($form_values['message']) and $form_values['message'] != '') {
    $messageLabel = 'Message_' . date('Y-m-d_H:i:s');
    $options['properties'][$messageLabel] = strip_tags($form_values['message']);
  }

  if (isset($form_values['pickList']) and $form_values['pickList'] != '') {
    $detailValue = date('Y-m-d H:i:s');
    $options['properties'][$form_values['pickList']] = $detailValue;
  }

  if (isset($form_fields->consentCount) and $form_fields->consentCount > 0) {
    for ($index = 0; $index < $form_fields->consentCount; $index++) {
      $options['consentDetails'][] = [
        'consentName' => $form_fields->consentDetails[$index]['name'],
        'consentAccept' => $form_values['consentDetails'][$index],
        'ip' => \Drupal::request()->getClientIp(),
        'optOut' => !$form_values['consentDetails'][$index],
      ];
    }
  }
}

/**
 * Send the colleted data to SALESmanago API
 *
 * @param $url string API url
 * @param $options array API POST data
 */
function send_request($url, $options) {
  $options['requestTime'] = \Drupal::time()->getRequestTime();

  // SALESmanago API only accepted requests that have been put on an array named 'json'.
  try {
    $logger = \Drupal::logger('salesmanago_integration');
    $response = \Drupal::httpClient()->post($url, ['json' => $options]);

    // DBLog messages
    if ($response->getStatusCode() == 200) {
      $logger->notice('Request to SALESmanago API executed successfully.');
    } else {
      $logger->warning('SALESmanago API request error: <br />' . $response->getBody());
    }
  }
  catch (RequestException $e) {
    $logger->error($e->getMessage());
  }
}
