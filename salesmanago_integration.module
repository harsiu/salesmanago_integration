<?php

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use GuzzleHttp\Exception\RequestException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Use this function to find the ID of the webform,
 * then call a function as the form is submitted.
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @param string $form_id
 * @throws InvalidPluginDefinitionException
 * @throws PluginNotFoundException
 */
function salesmanago_integration_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $query = \Drupal::entityTypeManager()->getStorage('salesmanago')->load($form_id);

  if (!empty($query)) {
    $form['actions']['submit']['#submit'][] = 'salesmanago_integration_webform_submit_handler';
  }
}

/**
 * Function to be called when a webform that exists in salesmanago integration form list is called
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @throws InvalidPluginDefinitionException
 * @throws PluginNotFoundException
 */
function salesmanago_integration_webform_submit_handler($form, FormStateInterface $form_state) {
  // endpoint config
  $endpoint = \Drupal::entityTypeManager()->getStorage('endpoint')->load('default');
  // salesmanago config for current form
  $form_fields = \Drupal::entityTypeManager()->getStorage('salesmanago')->load($form['form_id']['#value']);

  /**
   * @param $form_values
   *   Array of key values pairs where:
   *   - key is salesmanago entity key;
   *   - value is value of submitted form field
   */
  $form_values = get_form_values($form_fields, $form_state);

  /**
   * Accept and Content-Type headers are required according to Salesmanago API
   * @see https://docs.salesmanago.com/#general-information
   *
   * All API requests require these variables to be present:
   * - headers: call headers defined by SALESmanago API docs
   * - clientId: your personal client ID generated by SALESmanago
   * @see https://salesmanago.pl/settings/integration.htm
   * - apiKey: randomly generated string
   * - requestTime: timestamp of time when a API call was made
   * - sha: result of sha1 hash created from the combination of apiKey, clientId and $api_secret
   *   API secret key can be found in our SALESmanago integration page.
   * We set these variables in @see send_request();
   *
   * Contact insert/update call requires these fields:
   * - contact: array with contact details
   *   - email: contact email
   *   - name: contact full name
   * - owner: the owner of the contact (SALESmanago user account email)
   *
   * All other variables used in the /api/contact/upsert call are optional
   */
  $contact_request = [
    'headers' => [
      'Accept' => 'application/json, application/json',
      'Content-Type' => 'application/json;charset=UTF-8'
    ],
    'async' => true,
    'contact' => [
      'name' => $form_values['name'],
      'email' => $form_values['email'],
    ],
    'owner' => $endpoint->email,
    'forceOptIn' => false,
    'forceOptOut' => true,
    'forcePhoneOptIn' => false,
    'forcePhoneOptOut' => true,
  ];

  set_contact_request($form_fields, $form_values, $form_state, $endpoint->address, $contact_request);

  // Array for SM Note API request
  $note_request = [
    'headers' => [
      'Accept' => 'application/json, application/json',
      'Content-Type' => 'application/json;charset=UTF-8'
    ],
    'owner' => $endpoint->email,
    'email' => $form_values['email'],
  ];

  set_note_request($form_fields, $form_values, $form_state, $endpoint->address, $note_request);
}

/**
 * Get form values from form fields specified in SALESmanago forms settings
 * Loop over SM forms settings and get all configured form field values
 *
 * @param EntityInterface $form_fields SalesManago Form config entity
 * @param FormStateInterface $form_state
 * @return array
 */
function get_form_values($form_fields, FormStateInterface $form_state) {
  $form_values = [];

  foreach ($form_fields as $sm_setting => $sm_setting_value) {
    switch ($sm_setting) {
      case ($sm_setting == 'uuid' || $sm_setting == 'id' || $sm_setting == 'consentCount'):
      {
        break;
      }
      case ($sm_setting == 'consentDetails' || $sm_setting == 'standardDetails' ||
        $sm_setting == 'notes'):
      {
        foreach ($sm_setting_value as $key => $setting) {
          $form_values[$sm_setting][$key] = $form_state->getValue($setting['field']);
        }

        break;
      }
      default:
      {
        // if SM API field is configured
        if (!empty($sm_setting_value)) {
          $form_values[$sm_setting] = $form_state->getValue($sm_setting_value);
        }
      }
    }
  }

  return $form_values;
}

/**
 * Set optional SM form config values to request array if they are configured.
 * If submitted form field value is empty, do not include it in the API request.
 * When SM already has these contact details, then empty submission will overwrite contact info.
 *
 * @param EntityInterface $form_fields SalesManago form configuration
 * @param array $form_values Form values
 * @param FormStateInterface $form_state Form state
 * @param string $api_address
 * @param array $contact_request Data to send to SM
 * @return
 */
function set_contact_request($form_fields, $form_values, $form_state, $api_address, &$contact_request) {
  if (isset($form_values['forceOptIn']) && $form_values['forceOptIn'] == 1) {
    $contact_request['forceOptOut'] = false;
    $contact_request['forceOptIn'] = true;
  }

  if (isset($form_values['forcePhoneOptIn']) && $form_values['forcePhoneOptIn'] == 1) {
    $contact_request['forcePhoneOptOut'] = false;
    $contact_request['forcePhoneOptIn'] = true;
  }

  if (!empty($form_values['phone'])) {
    $contact_request['contact']['phone'] = $form_values['phone'];
  }

  if (!empty($form_fields->tags)) {
    $tags = explode(',', $form_fields->tags);
    $contact_request['tags'] = $tags;
  }

  if (!empty($form_fields->consentDetails)) {
    foreach ($form_fields->consentDetails as $key => $consent) {
      $contact_request['consentDetails'][] = [
        'consentName' => $consent['name'],
        'consentAccept' => $form_values['consentDetails'][$key],
        'ip' => \Drupal::request()->getClientIp(),
        'optOut' => !$form_values['consentDetails'][$key],
      ];
    }
  }

  if (!empty($form_fields->standardDetails)) {
    foreach ($form_fields->standardDetails as $key => $detail) {
      // Detail label and value could either be a string with token or a form field value
      $label = $form_state->getValue($detail['label']);
      $value = $form_values['standardDetails'][$key];

      if (empty($label)) {
        $label = \Drupal::token()->replace($detail['label']);
      }

      if (empty($value)) {
        $value = \Drupal::token()->replace($detail['field']);
      }

      $contact_request['properties'][$label] = $value;
    }
  }

  $url = 'https://' . $api_address . '/api/contact/upsert'; // set full path for specific api request
  send_request($url, $contact_request, 'Contacts');
}

/**
 * Function to build remaining variables for a SM Notes API request
 *
 * @param EntityInterface $form_fields SalesManago form configuration
 * @param array $form_values Form values
 * @param FormStateInterface $form_state Form state
 * @param string $api_address
 * @param array $note_request Data to send to SM
 * @return
 */
function set_note_request($form_fields, $form_values, $form_state, $api_address, &$note_request) {
  if (!empty($form_fields->notes)) {
    $url = 'https://' . $api_address . '/api/contact/addNote'; // set full path for specific api request

    foreach ($form_fields->notes as $key => $note) {
      // Note label and value could either be a string with token or a form field value
      $header = $form_state->getValue($note['label']);
      $content = $form_values['standardDetails'][$key];

      if (empty($header)) {
        $header = \Drupal::token()->replace($note['label']);
      }

      if (empty($content)) {
        $content = \Drupal::token()->replace($note['field']);
      }

      $note = $header . " " . $content;
      $note_request['note'] = addslashes(strip_tags($note));

      if (empty($note_request['note'])) {
        continue;
      }

      send_request($url, $note_request, 'Notes');
    }
  }
}

/**
 * Send the colledted data to SALESmanago API
 *
 * @param string $url API address
 * @param array $request request data
 * @param string $api API name
 * @return boolean
 * @throws InvalidPluginDefinitionException
 * @throws PluginNotFoundException
 */
function send_request($url, &$request, $api) {
  $logger = \Drupal::logger('salesmanago_integration');

  // endpoint config
  $endpoint = \Drupal::entityTypeManager()->getStorage('endpoint')->load('default');
  $api_secret = (string) $endpoint->apiSecret;
  $client_id = (string) $endpoint->clientId;
  $api_key = substr(md5(rand()), 0, 10);

  $request['clientId'] = $client_id;
  $request['apiKey'] = $api_key;
  $request['requestTime'] = \Drupal::time()->getRequestTime();
  $request['sha'] = sha1($api_key . $client_id . $api_secret);

  if (empty($client_id) || empty($api_secret)) {
    $logger->error("Could not build " . $api . " API request. Please check your endpoint settings");
    return false;
  }

  // SALESmanago API only accepted requests that have been put on an array named 'json'.
  try {
    $response = \Drupal::httpClient()->post($url, ['json' => $request]);
    // DBLog messages
    if ($response->getStatusCode() == 200) {
      $data = json_decode($response->getBody());
      if ($data->success) {
        $logger->notice('Request to ' . $api . ' API executed successfully.');
      }
      else {
        $logger->warning($api . ' API error: ' . $data->message[0]);
      }
    }
    else {
      $logger->warning($api . ' API request error: <br />' . $response->getBody());
    }
  } catch (RequestException $e) {
    $logger->error($e->getMessage());
  }
}
