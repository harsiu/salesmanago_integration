<?php

use GuzzleHttp\Exception\RequestException;
use Drupal\Core\Form\FormStateInterface;
/**
 * Use this function to find the ID of the webform,
 * then call a function as the form is submitted.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function salesmanago_integration_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $query = \Drupal::entityTypeManager()->getStorage('salesmanago')->load($form_id);

  if(!empty($query)) {
    $form['actions']['submit']['#submit'][] = 'salesmanago_integration_webform_submit_handler';
  }
}

/**
 * Function to be called when a webform that exists in salesmanago integration form list is called
 *
 * @param $form
 * @param $form_state
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function salesmanago_integration_webform_submit_handler($form, FormStateInterface $form_state) {
  // endpoint config
  $endpoint = \Drupal::entityTypeManager()->getStorage('endpoint')->load('default');

  // salesmanago config for current form
  $form_fields = \Drupal::entityTypeManager()->getStorage('salesmanago')->load($form['form_id']['#value']);

  /**
   * @param $form_values
   *   Array of key values pairs where:
   *   - key is salesmanago entity key;
   *   - value is value of submitted form field
   */
  $form_values = [];

  foreach ($form_fields as $sm_field => $webform_field) {
    if ($sm_field == "uuid" or $sm_field == "id") { // define salesmanago config fields to ignore
      continue;
    }

    if (!empty($webform_field)) {
      $form_values[$sm_field] = $form_state->getValue($webform_field);
    }
  }

  $url = "https://" . $endpoint->address . "/api/contact/upsert"; // set full path for specific api request
  $client_id = $endpoint->client_id;

  /**
   * @param $api_key
   *   A random string generated before every API request.
   *   SALESmanago API docs do not specify length requirements, we use 10 characters.
   */
  $api_key = substr(md5(rand()), 0, 10);
  $api_secret = $endpoint->api_secret;
  $sha = sha1($api_key . $client_id . $api_secret);

  $forceOptIn = false;
  $forcePhoneOptIn = false;

  if (isset($form_values['forceOptIn']) and $form_values['forceOptIn'] == 1) {
    $forceOptIn = true;
  }

  if (isset($form_values['forcePhoneOptIn']) and $form_values['forcePhoneOptIn'] == 1) {
    $forcePhoneOptIn = true;
  }

  /**
   * @param $options
   *   Array of elements to be passed to the API
   *
   * Accept and Content-Type headers are required according to Salesmanago API
   * @see https://docs.salesmanago.com/#general-information
   *
   * All API calls require these elements to be present:
   * - headers: call headers defined by SALESmanago API docs
   * - clientId: your personal client ID generated by SALESmanago
   *   @see https://salesmanago.pl/settings/integration.htm
   * - apiKey: randomly generated string
   * - requestTime: timestamp of time when a API call was made
   * - sha: result of sha1 hash created from the combination of apiKey, clientId and $api_secret
   *   API secret key can be found in our SALESmanago integration page.
   *
   * Contact insert/update call requires these fields:
   * - contact: array with contact details
   *   - email: contact email
   *   - name: contact full name
   * - owner: the owner of the contact (SALESmanago user account email)
   *
   * All other variables used in the /api/contact/upsert call are optional
   */
  $options = [
    "headers" => [
      "Accept" => "application/json, application/json",
      "Content-Type" => "application/json;charset=UTF-8"
    ],
    "clientId" => $client_id,
    "apiKey" => $api_key,
    "requestTime" => \Drupal::time()->getRequestTime(),
    "sha" => $sha,
    "async" => true,
    "contact" => [
      "name" => $form_values['name'],
      "email" => $form_values['email'],
    ],
    "owner" => $endpoint->email,
    "forceOptOut" => !$forceOptIn,
    "forceOptIn" => $forceOptIn,
    "forcePhoneOptOut" => !$forcePhoneOptIn,
    "forcePhoneOptIn" => $forcePhoneOptIn,
    "properties" => [
    ],
  ];

  if (isset($form_values["phone"]) and $form_values["phone"] != '') {
    $options["contact"]["phone"] = $form_values["phone"];
  }

  if (isset($form_values["message"]) and $form_values["message"] != '') {
    $messageLabel = "mail " . date("Y-m-d H:i:s");
    $options["properties"][$messageLabel] = $form_values["message"];
  }

  if (isset($form_values["pickList"]) and $form_values["pickList"] != '') {
    $detailLabel = date("Y-m-d H:i:s");
    $options["properties"][$detailLabel] = $form_values["pickList"];
  }

  /**
   * Try sending a POST request to SALESmanago API.
   *
   * SALESmanago API only accepted requests that have been put on an array named 'json'.
   */
  try {
    $response = \Drupal::httpClient()->post($url, ['json' => $options]);

    /**
     * DBLog messages
     */
    if ($response->getStatusCode() == 200) {
      \Drupal::logger('salesmanago_integration')->notice("Request to SALESmanago API executed successfully.");
    } else {
      \Drupal::logger('salesmanago_integration')->warning("SALESmanago API request error: <br />" . $response->getBody());
    }
  }
  catch (RequestException $e) {
    \Drupal::logger('salesmanago_integration')->error($e->getMessage());
  }
}
